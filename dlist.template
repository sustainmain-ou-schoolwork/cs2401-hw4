template<class T>
dlist<T>::~dlist() {
    dnode<T>* previous = head;

    // delete each node
    while (head != NULL) {
        previous = head;
        head = head -> next();
        delete previous;
    }
}

template<class T>
dlist<T>::dlist(const dlist& other) {
    head = tail = NULL;

    dnode<T>* cursor = other.head;
    dnode<T> tmp;

    // copy each node from other
    while (cursor != NULL) {
        tmp = dnode<T>(cursor -> data());
        rear_insert(tmp);
        cursor = cursor -> next();
    }
}

template<class T>
void dlist<T>::operator = (const dlist& other) {
    if (this == &other) {
        return;
    }

    // delete all nodes
    dnode<T>* previous;
    while (head != NULL) {
        previous = head;
        head = head -> next();
        delete previous;
    }
    tail = NULL;

    // copy each node from other
    dnode<T>* cursor = other.head;
    dnode<T> tmp;
    while (cursor != NULL) {
        tmp = dnode<T>(cursor -> data());
        rear_insert(tmp);
        cursor = cursor -> next();
    }
}

template<class T>
void dlist<T>::front_insert(const T& item) {
    // if list is empty
    if (head == NULL) {
        head = tail = new dnode<T>(item);
    }
    else {
        head -> set_prev(new dnode<T>(item, NULL, head));
        head = head -> prev();
    }
}

template<class T>
void dlist<T>::rear_insert(const T& item) {
    // if list is empty
    if (head == NULL) {
        head = tail = new dnode<T>(item);
    }
    else {
        tail -> set_next(new dnode<T>(item, tail));
        tail = tail -> next();
    }
}

template<class T>
void dlist<T>::front_remove() {
    dnode<T>* cursor = head;

    if (head != NULL) {
        head = head -> next();
        head -> set_prev(NULL);
    }

    delete cursor;
}

template<class T>
void dlist<T>::rear_remove() {
    dnode<T>* cursor = tail;

    if (tail != NULL) {
        tail = tail -> prev();
        tail -> set_next(NULL);
    }

    delete cursor;
}

template<class T>
void dlist<T>::show() {
    dnode<T>* cursor = head;

    while (cursor != NULL) {
        std::cout << cursor -> data() << std::endl;
        cursor = cursor -> next();
    }
}

template<class T>
void dlist<T>::reverse_show() {
    dnode<T>* cursor = tail;

    while (cursor != NULL) {
        std::cout << cursor -> data() << std::endl;
        cursor = cursor -> prev();
    }
}